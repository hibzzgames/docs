diff --git a/node_modules/@astrojs/starlight/schema.ts b/node_modules/@astrojs/starlight/schema.ts
index 690e155..b7b1815 100644
--- a/node_modules/@astrojs/starlight/schema.ts
+++ b/node_modules/@astrojs/starlight/schema.ts
@@ -37,6 +37,11 @@ export function docsSchema() {
        */
       description: z.string().optional(),
 
+      /**
+       * An optional number that represents the priority of the page in the sidebar
+       */
+      priority: z.number().optional(),
+
       /**
        * Custom URL where a reader can edit this page.
        * Overrides the `editLink.baseUrl` global config if set.
diff --git a/node_modules/@astrojs/starlight/utils/navigation.ts b/node_modules/@astrojs/starlight/utils/navigation.ts
index 8e9fea3..d58a506 100644
--- a/node_modules/@astrojs/starlight/utils/navigation.ts
+++ b/node_modules/@astrojs/starlight/utils/navigation.ts
@@ -15,6 +15,7 @@ export interface Link {
   label: string;
   href: string;
   isCurrent: boolean;
+  priority: number;
 }
 
 interface Group {
@@ -104,14 +105,15 @@ function linkFromConfig(
     if (locale) href = '/' + locale + href;
   }
   const label = pickLang(item.translations, localeToLang(locale)) || item.label;
-  return makeLink(href, label, currentPathname);
+  return makeLink(href, label, currentPathname, 0);
 }
 
 /** Create a link entry. */
-function makeLink(href: string, label: string, currentPathname: string): Link {
+function makeLink(href: string, label: string, currentPathname: string, priority: number | undefined): Link {
   if (!isAbsolute(href)) href = pathWithBase(href);
   const isCurrent = href === currentPathname;
-  return { type: 'link', label, href, isCurrent };
+  priority ??= Number.MAX_SAFE_INTEGER;
+  return { type: 'link', label, href, isCurrent, priority };
 }
 
 /** Get the segments leading to a page. */
@@ -158,7 +160,8 @@ function linkFromSlug(slug: string, currentPathname: string): Link {
   return makeLink(
     slugToPathname(doc.slug),
     doc.entry.data.title,
-    currentPathname
+    currentPathname,
+    doc.entry.data.priority,
   );
 }
 
@@ -193,15 +196,84 @@ function dirToItem(
     : groupFromDir(dirOrSlug, fullPath, dirName, currentPathname, locale);
 }
 
+function filterSidebar(entries: SidebarEntry[], root_name: string) : SidebarEntry[] { 
+  // filter the sidebar to contain just the tools we need
+   return entries.map( entry => { 
+    return {...entry} 
+  }).filter(entry => {
+    if(entry.type == 'group') {
+      entry.entries = filterSidebar(entry.entries, root_name);
+      return entry.entries.length != 0; // we only want groups that have content in it
+    }
+
+    if(entry.type == 'link') {
+      return entry.href.startsWith(root_name);
+    }
+  });
+}
+
+// find an entries priority
+function getSidebarEntryPriority(entry: SidebarEntry) : number {
+  if(entry.type === 'link') {
+    return entry.priority;
+  }
+
+  // we are dealing with a group, and group's priority is said to be the lowest priority of its child elements
+  // for some reason if the entry if the entries are empty, then it would be the max value
+  if(entry.entries.length <= 0) { return Number.MAX_SAFE_INTEGER; }
+
+  // loop through each entry to find the lowest priority
+  let lowest : number = Number.MAX_SAFE_INTEGER;
+  entry.entries.forEach(sub_entry => {
+    let sub_entry_prio = getSidebarEntryPriority(sub_entry);
+    if(sub_entry_prio < lowest) {
+      lowest = sub_entry_prio;
+    }
+  });
+
+  // now return the lowest
+  return lowest;
+}
+
+// determines how to compare two sidebar entries
+function compareSidebarEntry(a: SidebarEntry, b: SidebarEntry) : number {
+  return getSidebarEntryPriority(a) - getSidebarEntryPriority(b);
+}
+
+// sort the sidebar
+function sortSidebar(entries: SidebarEntry[]) : SidebarEntry[] {
+  
+  // perform sort on self
+  entries = entries.sort(compareSidebarEntry);
+
+  // then perform sort on any child entries
+  entries.map( entry => {
+    return {...entry}
+  }).forEach((entry) => {
+    if(entry.type === 'group') {
+      entry.entries = sortSidebar(entry.entries);
+    }
+  });
+
+  // done!
+  return entries;
+}
+
 /** Create a sidebar entry for a given content directory. */
 function sidebarFromDir(
   tree: Dir,
   currentPathname: string,
   locale: string | undefined
 ) {
-  return Object.entries(tree).map(([key, dirOrSlug]) =>
+  let sidebar_entries = Object.entries(tree).map(([key, dirOrSlug]) =>
     dirToItem(dirOrSlug, key, key, currentPathname, locale)
   );
+
+  // start from position 1 to select the second '/' as the first '/' is guaranteed to be in the 0th position
+  // add +1 to the index of to include the '/' in the root name
+  let root_name = currentPathname.substring(0, currentPathname.indexOf('/', 1) + 1);
+  let filtered_sidebar = filterSidebar(sidebar_entries, root_name);
+  return sortSidebar(filtered_sidebar);
 }
 
 /** Get the sidebar for the current page. */
