diff --git a/node_modules/@astrojs/starlight/utils/navigation.ts b/node_modules/@astrojs/starlight/utils/navigation.ts
index 8e9fea3..e5e70d8 100644
--- a/node_modules/@astrojs/starlight/utils/navigation.ts
+++ b/node_modules/@astrojs/starlight/utils/navigation.ts
@@ -15,6 +15,7 @@ export interface Link {
   label: string;
   href: string;
   isCurrent: boolean;
+  priority: number;
 }
 
 interface Group {
@@ -104,14 +105,15 @@ function linkFromConfig(
     if (locale) href = '/' + locale + href;
   }
   const label = pickLang(item.translations, localeToLang(locale)) || item.label;
-  return makeLink(href, label, currentPathname);
+  return makeLink(href, label, currentPathname, 0);
 }
 
 /** Create a link entry. */
-function makeLink(href: string, label: string, currentPathname: string): Link {
+function makeLink(href: string, label: string, currentPathname: string, priority: number | undefined): Link {
   if (!isAbsolute(href)) href = pathWithBase(href);
   const isCurrent = href === currentPathname;
-  return { type: 'link', label, href, isCurrent };
+  priority ??= Number.MAX_SAFE_INTEGER;
+  return { type: 'link', label, href, isCurrent, priority };
 }
 
 /** Get the segments leading to a page. */
@@ -158,7 +160,8 @@ function linkFromSlug(slug: string, currentPathname: string): Link {
   return makeLink(
     slugToPathname(doc.slug),
     doc.entry.data.title,
-    currentPathname
+    currentPathname,
+    doc.entry.data.priority,
   );
 }
 
@@ -193,15 +196,76 @@ function dirToItem(
     : groupFromDir(dirOrSlug, fullPath, dirName, currentPathname, locale);
 }
 
+function filterSidebar(entries: SidebarEntry[], root_name: string) : SidebarEntry[] { 
+  // filter the sidebar to contain just the tools we need
+   return entries.map( entry => { 
+    return {...entry} 
+  }).filter(entry => {
+    if(entry.type == 'group') {
+      entry.entries = filterSidebar(entry.entries, root_name);
+      return entry.entries.length != 0; // we only want groups that have content in it
+    }
+
+    if(entry.type == 'link') {
+      return entry.href.startsWith(root_name);
+    }
+  });
+}
+
+function sortSidebar(entries: SidebarEntry[]) : SidebarEntry[] {
+  // if there's only 1 element to sort, map sort will not be called
+  // that makes logical sense, but we have children entries that needs to be sorted as well.
+  // so taking care of that here
+  if(entries.length == 1) {
+    if(entries[0].type == "group") {
+      entries = entries[0].entries;
+    }
+  }
+
+  // sort by link priority
+  return entries.map( entry => { 
+    return {...entry} 
+  }).sort((a, b) => 
+  {
+    // as of now, we only know how to sort entries two links, so ignore if any is a group
+    if(a.type === 'group' || b.type === 'group') 
+    {
+      // the recursive loops might perform sorting operation on an already sorted 
+      // list, but better to be correct than fast
+
+      // TODO: group must be storted based on the page with the highest priority
+
+      // recursive loop on the A side
+      if(a.type === 'group') {
+        a.entries = sortSidebar(a.entries);
+      }
+
+      // recursive loop on b side
+      if(b.type === 'group') {
+        b.entries = sortSidebar(b.entries);
+      }
+
+      return 0; 
+    }
+    return a.priority - b.priority;
+  });
+}
+
 /** Create a sidebar entry for a given content directory. */
 function sidebarFromDir(
   tree: Dir,
   currentPathname: string,
   locale: string | undefined
 ) {
-  return Object.entries(tree).map(([key, dirOrSlug]) =>
+  let sidebar_entries = Object.entries(tree).map(([key, dirOrSlug]) =>
     dirToItem(dirOrSlug, key, key, currentPathname, locale)
   );
+
+  // start from position 1 to select the second '/' as the first '/' is guaranteed to be in the 0th position
+  // add +1 to the index of to include the '/' in the root name
+  let root_name = currentPathname.substring(0, currentPathname.indexOf('/', 1) + 1);
+  let filtered_sidebar = filterSidebar(sidebar_entries, root_name);
+  return sortSidebar(filtered_sidebar);
 }
 
 /** Get the sidebar for the current page. */
